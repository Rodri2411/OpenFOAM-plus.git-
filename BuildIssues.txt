OpenFOAM-1706
==================
Known Build Issues
==================

--------------
Intel Compiler
--------------

  Since OpenFOAM uses C++11, a fairly recent version is required.
  The Intel compiler - icc (ICC) 17.0.1 20161005 is ok, but the
  initial release - icc (ICC) 17.0.0 20160721 - has a bug that
  will result in these types of error messages.

    MatrixSpaceI.H(492): error: no instance of overloaded function
    "Foam::MatrixSpace<Form, Cmpt, Mrows, Ncols>::Block<SubTensor,
    BRowStart, BColStart>::operator=" matches the specified type


---
VTK
---

If using the runTimePostProcessing to create on-the-fly images, you
can simply just compile ParaView and these libraries will be used.

If you elect to use a separate VTK compilation (for example for
off-screen rendering), it is advisable to reuse the VTK libraries that
are provided with ParaView by making an appropriate symlink
prior to using makeVTK. This doesn't just reduce disk-space, but works
much better than using the VTK tar file.

Using runTimePostProcessing with the 'plain' VTK libraries does
generally work, but does not exit cleanly:

    symbol lookup error: .../linux64Gcc/VTK-7.1.0/lib/libvtkCommonExecutionModel-7.1.so.1:
    undefined symbol: _ZN33vtkFilteringInformationKeyManager13ClassFinalizeEv

    symbol lookup error: .../linux64Gcc/VTK-7.1.0/lib/libvtkCommonDataModel-7.1.so.1:
    undefined symbol: _ZN49vtkInformationQuadratureSchemeDefinitionVectorKeyD1Ev

This error appears to be suppressed if VTK is compiled with a Debug build-type.


-------------------------
Building on older systems
-------------------------

If the system gcc is too old for building OpenFOAM, a third-party gcc or
clang/llvm installation can be used. If building clang/llvm, note that
there are also minimum gcc/g++ requirements there:

   Min gcc/g++
   ===========   ==========
    4.4          llvm-3.4.2
    4.7          llvm-3.5.2 - llvm-3.7.0


If your system compiler is too old to build the minimum required gcc or
clang/llvm, it is just simply too old.


-------------------------
Building with spack
-------------------------

If you are building with spack, note that the depends_on for paraview
resolves poorly. The +qt dependency (for building the reader module)
may need to be specified as a preference by including the following in
your `~/.spack/packages.yaml` file:

    packages:
        paraview:
            variants: +qt

It appears that spack will otherwise ignore any paraview+qt version
and attempt to install a paraview~qt version instead.

--
