#!/bin/sh
cd ${0%/*} || exit 1    # Run from this directory

# Parse arguments for library compilation
. $WM_PROJECT_DIR/wmake/scripts/AllwmakeParseArguments

: ${FOAM_EXT_LIBBIN:=/usr/lib$WM_COMPILER_LIB_ARCH}  # Extra safety
export FOAM_EXT_LIBBIN

# Check for the existence of any of the files
# On success, echoes the file found and returns 0, otherwise returns 2
findFirstFile()
{
    local file
    for file
    do
        if [ -f "$file" -a -r "$file" ]
        then
            echo "$file"
            return 0
        fi
    done

    return 2
}


# Test for kahip.
# - return 0 and export KAHIP_ARCH_PATH on success
hasKahip()
{
    local warning="==> skip kahip"
    local header label settings

    unset KAHIP_ARCH_PATH KAHIP_VERSION
    settings=$($WM_PROJECT_DIR/bin/foamEtcFile config.sh/kahip) || {
        echo "$warning (no config.sh/kahip settings)"
        return 1
    }

    . $settings
    if [ -z "$KAHIP_ARCH_PATH" -o "${KAHIP_ARCH_PATH##*-}" = none ]
    then
        echo "$warning (not available)"
        return 1
    fi

    # Header
    header=$(findFirstFile \
        $KAHIP_ARCH_PATH/include/kaHIP_interface.h \
        /usr/include/kaHIP_interface.h \
    ) || {
        echo "$warning (no header)"
        return 2  # file not found
    }

    # Library
    [ "${KAHIP_ARCH_PATH##*-}" = system ] || \
    findFirstFile \
        $FOAM_EXT_LIBBIN/libkahip.so \
        $KAHIP_ARCH_PATH/lib/libkahip.a  \
        $KAHIP_ARCH_PATH/lib/libkahip.so \
        $KAHIP_ARCH_PATH/lib$WM_COMPILER_LIB_ARCH/libkahip.a \
        $KAHIP_ARCH_PATH/lib$WM_COMPILER_LIB_ARCH/libkahip.so \
    > /dev/null || {
        echo "$warning (missing library)"
        return 2
    }

    # kahip itself is 32-bit int, but our interface itself handles some
    # 64-bit conversion (mesh size).

    export KAHIP_ARCH_PATH
    echo "kahip (label=32) - $KAHIP_ARCH_PATH"
}


# Test for metis.
# - return 0 and export METIS_ARCH_PATH on success
hasMetis()
{
    local warning="==> skip metis"
    local header label settings

    unset METIS_ARCH_PATH METIS_VERSION
    settings=$($WM_PROJECT_DIR/bin/foamEtcFile config.sh/metis) || {
        echo "$warning (no config.sh/metis settings)"
        return 1
    }

    . $settings
    if [ -z "$METIS_ARCH_PATH" -o "${METIS_ARCH_PATH##*-}" = none ]
    then
        echo "$warning (not available)"
        return 1
    fi

    # Header
    header=$(findFirstFile \
        $METIS_ARCH_PATH/include/metis.h \
        /usr/include/metis.h \
    ) || {
        echo "$warning (no header)"
        return 2  # file not found
    }

    # Library
    [ "${METIS_ARCH_PATH##*-}" = system ] || \
    findFirstFile \
        $FOAM_EXT_LIBBIN/libmetis.so \
        $METIS_ARCH_PATH/lib/libmetis.a \
        $METIS_ARCH_PATH/lib/libmetis.so \
        $METIS_ARCH_PATH/lib$WM_COMPILER_LIB_ARCH/libmetis.a \
        $METIS_ARCH_PATH/lib$WM_COMPILER_LIB_ARCH/libmetis.so \
    > /dev/null || {
        echo "$warning (missing library)"
        return 2
    }

    # Ensure consistent sizes between OpenFOAM and metis header
    # Extract IDXTYPEWIDTH from metis.h: regex as per ThirdParty Allwmake
    label=$(sed -ne 's/^.*#define  *IDXTYPEWIDTH  *\([1-9][0-9]\).*/\1/p' $header)
    : ${label:=unknown}

    if [ "$WM_LABEL_SIZE" = "$label" ]
    then
        echo "Metis (label=$label) - $METIS_ARCH_PATH"
        export METIS_ARCH_PATH
    else
        echo "$warning (label=$WM_LABEL_SIZE, metis.h has '$label')"
        return 1
    fi
}


# Test for scotch.
# - return 0 and export SCOTCH_ARCH_PATH, SCOTCH_VERSION on success
hasScotch()
{
    local warning="==> skip scotch"
    local header label settings

    unset SCOTCH_ARCH_PATH SCOTCH_VERSION
    settings=$($WM_PROJECT_DIR/bin/foamEtcFile config.sh/scotch) || {
        echo "$warning (no config.sh/scotch settings)"
        return 1
    }

    . $settings
    if [ -z "$SCOTCH_ARCH_PATH" -o "${SCOTCH_ARCH_PATH##*-}" = none ]
    then
        echo "$warning (not available)"
        return 1
    fi

    # Header
    header=$(findFirstFile \
        $SCOTCH_ARCH_PATH/include/scotch.h \
        /usr/include/scotch/scotch.h \
        /usr/include/scotch.h
    ) || {
        echo "$warning (no header)"
        return 2  # file not found
    }

    # Library
    [ "${SCOTCH_ARCH_PATH##*-}" = system ] || \
    findFirstFile \
        $FOAM_EXT_LIBBIN/libscotch.so \
        $SCOTCH_ARCH_PATH/lib/libscotch.a \
        $SCOTCH_ARCH_PATH/lib/libscotch.so \
        $SCOTCH_ARCH_PATH/lib$WM_COMPILER_LIB_ARCH/libscotch.a \
        $SCOTCH_ARCH_PATH/lib$WM_COMPILER_LIB_ARCH/libscotch.so \
    > /dev/null || {
        echo "$warning (missing library)"
        return 2
    }

    # Ensure consistent sizes between OpenFOAM and scotch header
    # extract 'typedef int64_t SCOTCH_Num' or equivalent
    label=$(sed -ne \
        's/^.*typedef *\([^ ]*\) *SCOTCH_Num.*/\1/ip' \
        "$header")

    : ${label:=unknown}

    # No SCOTCH_VERSION set? Try to obtain from header
    # extract #define SCOTCH_VERSION, SCOTCH_RELEASE, SCOTCH_PATCHLEVEL
    [ -n "$SCOTCH_VERSION" ] || \
    SCOTCH_VERSION=$(
        eval $(
            sed -ne \
            's/^ *#define *SCOTCH_\(VERSION\|RELEASE\|PATCHLEVEL\) *\([0-9][0-9]*\).*$/\1=\2/p' \
            "$header"
        )

        set -- $VERSION $RELEASE $PATCHLEVEL
        IFS="."
        [ "$#" -gt 0 ] && echo "scotch-$*"
    )

    # Failsafe value
    : ${SCOTCH_VERSION:=scotch}

    case "$WM_LABEL_SIZE:$label" in
    (32:int32_t | 32:int | 64:int64_t | 64:long)
        echo "Scotch (label=$label) - $SCOTCH_ARCH_PATH"
        export SCOTCH_ARCH_PATH SCOTCH_VERSION
        ;;

    *)
        echo "$warning (label='$WM_LABEL_SIZE', scotch.h has '$label')"
        return 1
        ;;
    esac
}


#
# Define how to create an mpi-versioned library of $targetType
# compile into qualified directory
# use sentinel file(s) to handle version changes
#
wmakeMpiLib()
{
    local decompName="$1"
    local objectsDir
    shift
    for libName
    do
    (
        WM_OPTIONS="$WM_OPTIONS$WM_MPLIB"
        objectsDir="$WM_PROJECT_DIR/build/$WM_OPTIONS/src/parallel/decompose/$libName"
        whichmpi="$objectsDir/using:$FOAM_MPI"
        whichdecomp="$objectsDir/using:$decompName"
        [ -e "$whichmpi" -a -e "$whichdecomp" ] || wclean $libName
        echo "wmake $targetType $libName"
        wmake $targetType $libName
        mkdir -p "$objectsDir"
        touch "$whichdecomp" "$whichmpi"
    )
    done
}

wmakeLnInclude -u decompositionMethods

if hasScotch
then
    wmake $targetType scotchDecomp
    if [ -d "$FOAM_LIBBIN/$FOAM_MPI" ]
    then
        wmakeMpiLib "$SCOTCH_VERSION" ptscotchDecomp
    fi
fi

if hasMetis
then
    wmake $targetType metisDecomp
fi

if hasKahip
then
    wmake $targetType kahipDecomp
fi

wmake $targetType decompositionMethods
wmake $targetType decompose


#------------------------------------------------------------------------------
